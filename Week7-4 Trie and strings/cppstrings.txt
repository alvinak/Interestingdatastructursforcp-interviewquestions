String in c++ supports basic operations like substr,compare etc
roughly it manages things like vector
for smaller strings (15/22 chars) there is no seperate allocation else small array is used (think like emplace_back for small string)

Reading string cin>>s;

Check if string are palindrome of each other
auto areEqual = S.compare(tmp) == 0;
compare() returns a signed integral indicating the relation between the strings: 0 means they compare equal; a positive value means the string is lexicographically greater than the passed string s>temp; a negative value means the string is lexicographically lesser than the passed string.

we can also use compare to check if one string is "prefix of another"
s="Ram"
r="ra" 

ra size is 2
s.compare(0,ra.size(),r);
answer will be 0


Reverse in place
reverse(begin(str),end(Str))
if we dont want to modify string and reverse
string tmp(S.size(),0)//fill constructor
reverse_copy(begin(S),end(S),begin(temp));

Equal function 
Checks if two strings are equal
std::equal(begin(c1), end(c1), begin(c2), end(c2)); 

check if string is palindrome
auto ispalindrome = string::equal(begin(c1),end(c1),rbegin(c1));

but even this is not efficient since we dont need to check till end

 // best solution auto ispalindrome =string::equal(begin(s),begin(s)+s.size()/2,rbegin(s))
both string::size and string::length are synonyms and return the exact same value
size_t is unsigned integer type

To check for palindrome index(removal of index which makes strings equal)
string S = "acacba";
auto mism = mismatch(begin(S), begin(S) + S.size()/2, rbegin(S));
mism.first will point to c and mis.second points to basic


in situation when either of them is resulting in string not being palindrom 

const auto diffIt = mismatch(begin(S), begin(S) + S.size()/2, rbegin(S)).first; // first iterator
const auto diffIdx = distance(begin(S), diffIt); // 0-based index of the mismatch
const auto toCheck = S.substr(0, diffIdx) + S.substr(diffIdx + 1);
if (equal(begin(toCheck), begin(toCheck) + toCheck.size()/2, rbegin(toCheck))) // is palindrome?
 cout << diffIdx << endl;
else
 cout << S.size() - diffIdx - 1;
 
 
 distance(begin(S), diffIt); means no of elements between begin and diffit
 
S.substr(pos, count) returns the substring of S that starts at character position pos and spans count chars (or until the end of the string, whichever comes first) â€“ S[pos, pos + count). If pos + count extends past the end of the string, or if count is std::string::npos, the returned substring is [pos, size()). For example:

string S = "hello";
auto substr = S.substr(1, 3); // ell

npos is a static member constant value with the greatest possible value for an element of type size_t.

This value, when used as the value for a len (or sublen) parameter in string's member functions, means "until the end of the string".

As a return value, it is usually used to indicate no matches.

This constant is defined with a value of -1, which because size_t is an unsigned integral type, it is the largest possible representable value for this type.

                                          // "This is an example sentence."
  str.erase (10,8);                        //            ^^^^^^^^
  std::cout << str << '\n';
                                           // "This is an sentence."
  str.erase (str.begin()+9);               //           ^
  std::cout << str << '\n';
                                           // "This is a sentence."
  str.erase (str.begin()+5, str.end()-9);  //       ^^^^^
  std::cout << str << '\n';
                                           // "This sentence."
										   s.find(':")
	
	
	std::to_string(numeric_type)

// For example:
auto piStr = to_string(3.14); // double

accumulate , does sum between first and last but can put comparator there
int myfun(int x, int y)  
{ 
    // for this example we have taken product  
    // of adjacent numbers 
    return x * y ; 
} 
  
int main()  
{ 
    // Initialize sum = 1  
    int sum = 1; 
    int a[] = {5 , 10 , 15} ; 
      
    // Simple default accumulate function 
    cout << "\nResult using accumulate: "; 
    cout << accumulate(a , a+3 , sum); 
      
    // Using accumulate function with 
    // defined function 
    cout << "\nResult using accumulate with"
             "user-defined function: "; 
    cout << accumulate(a, a+3, sum, myfun); 
     
    // Using accumulate function with 
    // pre-defined function  
    cout << "\nResult using accumulate with "
            "pre-defined function: "; 
    cout << accumulate(a, a+3, sum, std::minus<int>());
	
	Result using accumulate: 31
Result using accumulate with user-defined function: 750
Result using accumulate with pre-defined function: -29

To convert multi digit string to number
auto mult = number[0] == '-' ? -1 : 1;
auto realBegin = mult > 0 ? begin(number) : next(begin(number));
auto toInt = mult * accumulate(realBegin, end(number), 0, [](int curr, char nxt){
   return curr * 10 + nxt - '0';
});
another way

stoi 
auto toint =stoi("10");
auto todbl=stod("10.123");
stof also there 

since stl function they throw proper errors while atoi etc return 0

string find
size_t find (const char *str, size_t pos, size_t n);
from which pos till , no of characters to match
    // Only search first 5 characters of "geeks.practice"  and 2 occurences
    size_t found = str.find("geeks.practice", 0, 5); 
    if (found != string::npos) 
        cout << found << endl; 
	found=str.find("geeks.practice",found+1,5);
    if(found!=string::npos) 
    cout<<found<<endl;	
										   
										  