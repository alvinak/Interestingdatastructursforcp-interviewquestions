eg 2 sum
nearest neighbour
include <iostream>
#include <vector>
#include<stack>

using namespace std;

int main() {
	int num;
	cin >> num;			
	int arr[num];
	for(int i=0;i<num;i++)
	cin>>arr[i];
    stack<int>s;
	vector<int>ans;
	
	for(int i=0;i<num;i++){
		while(!s.empty()&&arr[i]<=s.top() )
			s.pop();
		if(s.empty())ans.push_back(-1);
		else ans.push_back(s.top());
		s.push(arr[i]);
    }
	for(int i=0;i<num-1;i++)
	cout<<ans[i]<<" ";
	cout<<ans[num-1]<<endl;
	}					
Subarray sum=k(For negative value cant be done using two pointer
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int>mp;
        int answer=0;
        int prefix=0;
        mp[prefix]++;
        for(int i=0;i<nums.size();i++){
            prefix+=nums[i];
            answer+=mp[prefix-k];
            mp[prefix]++;
        }
        return answer;
    }
};

Sliding window maximum

trick is to use double ended queue, store max in front (so popping from back also required)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        vector<int>v;
        
       deque<int>dq;
        for(int i=0;i<nums.size();i++){
          while(!dq.empty() && nums[i]>=nums[dq.back()])dq.pop_back();
          dq.push_back(i);
          if(i>=k-1)v.push_back(nums[dq.front()]);
          if(dq.front()<=i-k+1)dq.pop_front();
        }
        return v;
    }
};